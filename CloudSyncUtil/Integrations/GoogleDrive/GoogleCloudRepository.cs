using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CloudSyncUtil.Core.Configuration;
using CloudSyncUtil.Core.Integrations;
using Google.Apis.Drive.v3;
using Google.Apis.Drive.v3.Data;

namespace CloudSyncUtil.Integrations.GoogleDrive
{
    public class GoogleCloudRepository:CloudRepository<File>
    {
        protected readonly SettingsManager SettingsManager;

        // to make sure we dont ask for auth each time
        private DriveService googleDriveService;

        protected DriveService GoogleDriveService
        {
            get
            {
                if (googleDriveService == null)
                {
                    googleDriveService = this.Authorize() as DriveService;
                }
                return googleDriveService;
            }
        }

        public GoogleCloudRepository(SettingsManager settingsManager)
            : base(new GoogleAuthorizationProvider(settingsManager))
        {
            this.SettingsManager = settingsManager;
            
            this.ApiKey = ApiKeys.GoogleApiKey;
            this.ApiSecret = ApiKeys.GoogleApiSecret;

            this.UserName = this.SettingsManager.GoogleUserName();
        }

        public override File GetFile(string fileName)
        {
            throw new NotImplementedException();
        }

        public override File GetFolder(string folderName)
        {
            var searchString = // get folders not in trash
                string.Format("mimeType='application/vnd.google-apps.folder' and trashed=false and name='{0}'",
                    folderName);

            var searchResult = this.GetFiles(searchString, 1);

            return searchResult.SingleOrDefault();
        }

        public override bool HasFile(string fileName)
        {
            throw new NotImplementedException();
        }

        public override string GetFileMetadata(string fileName)
        {
            throw new NotImplementedException();
        }

        public override List<File> GetFiles(string search = "", int maxResults = 0)
        {
            var result = new List<File>();

            var list = GoogleDriveService.Files.List();
            
            if (search != null)
            {
                list.Q = search;
            }
            
            var filesFeed = list.Execute();

            while (filesFeed.Files != null)
            {
                result.AddRange(filesFeed.Files);
                
                // We will know we are on the last page when the next page token is null.
                // or we reached maximum results count
                // If this is the case, break.
                if (filesFeed.NextPageToken == null || (maxResults != 0 && result.Count >= maxResults))
                {
                    break;
                }

                // Prepare the next page of results
                list.PageToken = filesFeed.NextPageToken;

                // Execute and process the next page request
                filesFeed = list.Execute();
            }

            return result;
        }

        public override bool HasFolder(string folderName)
        {
            return GetFolder(folderName) != null ? true : false;
        }

        public override File CreateFolder(string name, File parent = default(File))
        {
            File newDir = null;

            // Create metaData for a new Directory
            File body = new File();
            
            body.Name = name;
            body.Description = "Automatically generated by cloud sync util";
            body.MimeType = "application/vnd.google-apps.folder";
            
            if (parent != null)
            {
                body.Parents = new List<string> {parent.Id};
            }

            try
            {
                if (!this.HasFolder(name))
                {
                    var request = GoogleDriveService.Files.Create(body);
                    
                    // fields that we need in future
                    request.Fields = "id";
                    request.Fields = "name";
                    
                    newDir = request.Execute();
                }
                else
                {
                    return this.GetFolder(name);
                }
                    
            }
            catch (Exception e)
            {
                Console.WriteLine("An error occurred: " + e.Message);
            }

            return newDir;
        }

        public override File CreateFolderStructure(string path)
        {
            throw new NotImplementedException();
        }

        public override File UploadFile(string name, File parent = default (File))
        {
            throw new NotImplementedException();
        }

    }
}
